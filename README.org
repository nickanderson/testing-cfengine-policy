#+title: Testing CFEngine Policy

Testing is an important part of the software life-cycle. Writing tests for your CFEngine policy can help to bring improved assurance that your policy behaves as expected. Follow along and write your first test policy.

When writing tests there are three or four basic stages that typically need to be handled:
- Initialization :: Set up the necessary conditions for the test, e.g. create some file's to be edited.
- Testing :: Running the policy whose behavior you wish to test.
- Checking :: Inspecting the results of the test policy to see if they conform with expectations.
- Cleanup :: You might need to cleanup artifacts produced by the test if your testing system does not handle it for you

These stages map well to a sequence of bundles. So, a simple test template could look like this:

#+caption: Simple test template
#+begin_src cfengine3 :include-stdlib nil :log-level info :exports both
  bundle agent __main__
  {
    methods:
        "init";
        "test";
        "check";
        "cleanup";
  }

  bundle agent init
  {}
  bundle agent test
  {}
  bundle agent check
  {}
  bundle agent cleanup
  {}
#+end_src

Let's take this template and start filling it in. First, we need some test case. Let's do something simple, for example, making sure the =reports= promise type attribute [[https://docs.cfengine.com/docs/3.18/reference-promise-types-reports.html#report_to_file][report_to_file]]
works as expected.

=report_to_file= simply emits a report to a file instead of to standard output. To initilize the test we might want to make sure the file we report to does not exist, then we would test reporting to the file. After reporting to the file we would inspect the file to make sure the content within matches our expectations before finally cleaning up that test file.

Let's get going with =bundle agent init=.

#+caption: bundle agent init
#+begin_src cfengine3 :include-stdlib nil :log-level info :exports both :tangle /tmp/example-test.cf
  bundle agent init
  # @brief Initialize the environment to prepare for the test
  {
    vars:
        "testfile" string => "/tmp/test-reports-report_to_file.txt";

    files:
        "$(testfile)"
          delete => my_tidy,
          if => fileexists( $(testfile) );
  }
  body delete my_tidy
  # @brief Duplicated from the stdlib
  {
          dirlinks => "delete";
          rmdirs   => "true";
  }
#+end_src

There we go, that should be enough to set the stage and make sure the test file does not exist when we exercise =report_to_file= in the =test= bundle.

#+caption: bundle agent test
#+begin_src cfengine3 :include-stdlib nil :log-level info :exports both :tangle /tmp/example-test.cf
  bundle agent test
  # @brief Test that report_to_file causes reports promises to be directed into a file.
  {
    reports:
        "Hello World!"
          report_to_file => "$(init.testfile)";
  }
#+end_src

Next we need to check that the file does indeed contain the expected content and emit something that let's us know if it passed or failed.

#+caption: bundle agent check
#+begin_src cfengine3 :include-stdlib nil :log-level info :exports both :tangle /tmp/example-test.cf
  bundle agent check
  # @brief Check that reports sent to a file are found as expected
  {
    classes:
        "testfile_exists" expression => fileexists( "$(init.testfile)" );

    reports:
      testfile_exists::
        "$(with)"
          with => ifelse( regcmp( "Hello World!",
                                  readfile( "$(init.testfile)" ) ), "Pass",
                          "FAIL" );
  }
#+end_src
